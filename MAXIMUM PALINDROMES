#!/bin/python3

import math
import os
import random
import re
import sys

#written code from here

# Import necessary modules
from collections import Counter, defaultdict
from math import factorial

# Create dictionaries to store factorials, powers, and character distributions
fact = dict()
powr = dict()
dist = defaultdict(lambda : Counter(""))

# Set a constant for modulo operation
m = 10 ** 9 + 7

#
# Complete the 'initialize' function below.
#
# The function accepts STRING s as parameter.
#

# Define the 'initialize' function that accepts a string 's' as a parameter
def initialize(s):
    # This function is called once before all queries.

    # Initialize the first elements of factorials, powers, and character distribution
    fact[0], powr[0], dist[0] = 1, 1, Counter(s[0])

    # Loop through the string 's' and compute factorials and character distribution
    for j in range(1, len(s)):
        fact[j] = (j * fact[j - 1]) % m
        dist[j] = dist[j-1] + Counter(s[j])

# Define a helper function 'power' to calculate the power of 'x' raised to 'n' modulo 'm'
def power(x, n, m):
    if n == 1:
        return x % m
    elif n % 2 == 0:
        return power(x ** 2 % m, n // 2, m)
    else:
        return (x * power(x ** 2 % m, (n - 1) // 2, m)) % m

#
# Complete the 'answerQuery' function below.

#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER l
#  2. INTEGER r
#

# Define the 'answerQuery' function that accepts two integers 'l' and 'r' as parameters
def answerQuery(l, r):
    # Return the answer for this query modulo 1000000007.

    # Calculate the character distribution in the range [l, r] and store it in 'b'
    b = dist[r-1] - dist[l-2]
    p, count, value = 0, 0, 1

    # Loop through the values in 'b' (character frequencies)
    for c in b.values():
        if c >= 2:
            count += c // 2
            value = (value * fact[c // 2]) % m
        if c % 2 == 1:
            p += 1

    # Calculate the answer using the computed values and return it modulo 'm'
    return (max(1, p) * fact[count] * power(value, m - 2, m)) % m

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    initialize(s)

    q = int(input().strip())

    for q_itr in range(q):
        first_multiple_input = input().rstrip().split()

        l = int(first_multiple_input[0])

        r = int(first_multiple_input[1])

        result = answerQuery(l, r)

        fptr.write(str(result) + '\n')

    fptr.close()
